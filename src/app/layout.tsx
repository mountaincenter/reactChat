import "~/styles/globals.css";
import { GeistSans } from "geist/font/sans";
import { type Metadata } from "next";
import { ThemeProvider } from "../components/theme-provider";
import SessionProviderWrapper from "~/components/SessionProviderWrapper";
import Head from "next/head";
import Script from "next/script";
import PusherBeamsClient from "../lib/PusherBeamsClent";
import { Toaster } from "~/components/ui/toaster";
import { getServerAuthSession } from "~/server/auth";
import { cn } from "~/lib/utils";

export const metadata: Metadata = {
  title: "Create T3 App",
  description: "Generated by create-t3-app",
  icons: [{ rel: "icon", url: "/favicon.ico" }],
};

type IconDescriptor = {
  rel: string;
  url?: string;
};

export default async function RootLayout({
  children,
}: Readonly<{ children: React.ReactNode }>) {
  const session = await getServerAuthSession();
  return (
    <html lang="en" className={cn(GeistSans.variable)}>
      <Head>
        {/* 他の head 内のメタ情報 */}
        <title>{metadata.title?.toString() ?? ""}</title>{" "}
        {/* 修正: titleの型エラー */}
        <meta name="description" content={metadata.description ?? ""} />{" "}
        {/* 修正: descriptionの型エラー */}
        {metadata.icons !== undefined &&
          Array.isArray(metadata.icons) &&
          metadata.icons.length > 0 && (
            <link
              rel="icon"
              href={
                typeof metadata.icons[0] === "string"
                  ? metadata.icons[0]
                  : ((metadata.icons[0] as IconDescriptor).url ?? "")
              }
            />
          )}
      </Head>
      <body>
        <ThemeProvider
          attribute="class"
          defaultTheme="system"
          enableSystem
          disableTransitionOnChange
        >
          <SessionProviderWrapper session={session}>
            {children}
            <Toaster />
          </SessionProviderWrapper>
          <PusherBeamsClient />
          {/* 非同期でPusher BeamsのSDKをロード */}
          <Script
            src="https://js.pusher.com/beams/1.0/push-notifications-cdn.js"
            strategy="lazyOnload" // ページ読み込み後に非同期でロード
          />
        </ThemeProvider>
      </body>
    </html>
  );
}

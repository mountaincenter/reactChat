generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    createdBy User     @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    messages      Message[] @relation("UserMessages")
    conversations Conversation[] @relation("UserConversations")
    groups        Group[]   @relation("GroupUsers")
}

model Group {
    id            String           @id @default(cuid())
    name          String
    isPrivate     Boolean          @default(false)
    createdAt     DateTime         @default(now())
    updatedAt     DateTime         @updatedAt
    image         String?
    members       User[]           @relation("GroupUsers")
    messages      Message[]        @relation("GroupMessages")
    conversations Conversation[]   @relation("GroupConversations")
}


model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Message {
    id            String       @id @default(cuid())
    content       String?      // メッセージの内容（暗号化される予定）
    timestamp     DateTime     @default(now())
    isDeleted     Boolean      @default(false)
    sender        User         @relation("UserMessages", fields: [senderId], references: [id])
    senderId      String
    conversation  Conversation? @relation(fields: [conversationId], references: [id])
    conversationId String?
    group         Group?       @relation("GroupMessages", fields: [groupId], references: [id])
    groupId       String?
    files         File[]       @relation("MessageFiles") // File とのリレーションを定義
}

model Conversation {
    id            String   @id @default(cuid())
    name          String?
    isGroup       Boolean  @default(false)
    participants  User[]   @relation("UserConversations")
    messages      Message[]
    group         Group?   @relation("GroupConversations", fields: [groupId], references: [id])
    groupId       String?
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
}

model File {
    id       String    @id @default(cuid())
    url      String    // ファイルの保存場所
    fileType FileType  // ファイルタイプ
    message  Message   @relation("MessageFiles", fields: [messageId], references: [id]) // 逆のリレーションを定義
    messageId String
}


enum FileType {
    IMAGE
    DOCUMENT
    PDF
    VIDEO
    AUDIO
}
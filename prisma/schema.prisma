generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    status        Status @default(OFFLINE)
    idleTimeout   Int    @default(300000)
    defaultStatus Status @default(ONLINE)
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    messages      Message[] @relation("UserMessages")
    conversations Conversation[] @relation("UserConversations")
}


model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Status {
    ONLINE
    OFFLINE
    IDLE
    MUTE
}

// Message モデル
model Message {
    id          String        @id @default(cuid())
    content     String        // メッセージの内容（暗号化される予定）
    timestamp   DateTime      @default(now())
    isDeleted   Boolean       @default(false)
    sender      User          @relation("UserMessages", fields: [senderId], references: [id])
    senderId    String
    conversation Conversation @relation(fields: [conversationId], references: [id])
    conversationId String
    files       File[]        // メッセージに添付されたファイル
}

// Conversation モデル
model Conversation {
    id            String   @id @default(cuid())
    name          String?  // グループチャットの名前
    isGroup       Boolean  @default(false)
    participants  User[]   @relation("UserConversations")
    messages      Message[]
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
}
// File モデル
model File {
    id       String    @id @default(cuid())
    url      String    // ファイルの保存場所
    fileType FileType  // ファイルタイプ
    message  Message   @relation(fields: [messageId], references: [id])
    messageId String
}

// FileType enum
enum FileType {
    IMAGE
    DOCUMENT
    PDF
    VIDEO
    AUDIO
}